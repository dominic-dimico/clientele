#!/usr/bin/python

from squirrel import squid
from squirrel import squint
import butterfly
import configparser
import toolbelt

config = configparser.ConfigParser()
config.read('/home/dominic/src/clientele/clientele.cfg')

client_squid   = squid.Squid(config,'client');
session_squid  = squid.Squid(config,'session');
exercise_squid = squid.Squid(config,'exercise');
message_squid = squid.Squid(config,'message');
delivery_squid = squid.Squid(config,'delivery');
schedule_squid = squid.Squid(config,'session');
exset_squid    = squid.Squid(config,'exercise_set');


global cmdwin;
global notewin;
global tabwin;
(cmdwin, notewin, tabwin) = squint.startup();



class ExSetWindow(squint.EditWindow):


      def duplicate_row(self):
        maxid = self.getmaxid();
        self.data = self.data[0:self.cursor.ypos] + [self.data[self.cursor.ypos], dict(self.data[self.cursor.ypos])] + self.data[self.cursor.ypos+1:];
        self.data[self.cursor.ypos+1]['id'] = maxid;
        self.data[self.cursor.ypos+1]['time'] = toolbelt.converters.date('now');
        self.ymax += 1;
        self.cursor.ymax += 1;
        return True;


      def getmaxid(self):
          if self.data:
             maxid = max([d['id'] for d in self.data]);
             return maxid + 1;
          else: 
            self.squid.query("select max(id) from "+self.squid.table);
            self.squid.data = self.squid.data[0];
            maxid = self.squid.data['max(id)'];
            del self.squid.data['max(id)'];
            return maxid + 1;


      def __init__(self, title, keybindings, squid):
          #self.hidden = ["clientid", "sessionid", "id"];
          squint.EditWindow.__init__(self, title, keybindings, squid);
          self.keys = ['exerciseid', 'resistance', 'reps', 'time']
          #self.keys = ['clientid', 'sessionid', 'id', 'exerciseid', 'resistance', 'reps', 'time']



class WorkoutWindow(squint.NewWindow):


      def insert(self):

          # Get ID by client name
          self.client_squid.query("select id,email from client where user='%s'" % (self.squid.data['client']));
          clientid = self.client_squid.data[0]['id'];
          email    = self.client_squid.data[0]['email'];
          self.squid.data['clientid'] = clientid;
          del self.squid.data['client'];
          sessionid = self.squid.getmaxid();
          self.squid.data['id'] = sessionid;
          self.squid.insert(self.squid.data);
          service  = self.squid.data['services'];
          time     = self.squid.data['time'];
          duration = self.squid.data['duration'];
          butterfly.scheduler.schedule_client(time,duration,service,email);

          exsetwin = ExSetWindow("exercises", None, self.exset_squid);
          args = {}
          args['sql'] = "select id,time,exerciseid,resistance,reps from exercise_set where sessionid=%s" % (self.squid.data['id'])
          args['keys'] = ['id', 'clientid', 'sessionid', 'time', 'exerciseid', 'resistance', 'reps'];
          args['fields'] = {
            'id' : 'int', 
            'clientid' : (client_squid, 'user'),
            'sessionid' : (squid, 'time'),
            'time' : 'datetime', 
            'exerciseid' : (exercise_squid, 'name'),
            'resistance' : 'int', 
            'reps' : 'int'
            };

          args['data'] = [];
          maxid = self.exset_squid.getmaxid();
          args['data'].append(
            {
              'id':    maxid,
              'clientid': clientid,
              'sessionid': sessionid,
              'time': toolbelt.converters.date('now'),
              'exerciseid': 0,
              'resistance': 0,
              'reps': 0 
            }
          )

          exsetwin.draw(args);

      
      def __init__(self, title, keybindings, session_squid, client_squid, exset_squid):
          squint.NewWindow.__init__(self, title, keybindings, session_squid);
          self.client_squid = client_squid;
          self.exset_squid = exset_squid;
          self.keys = ["client", "services", "time", "duration", "notes"];
          self.squid.fields = {
            'client'    : 'varchar(256)',
            'services'  : 'varchar(256)',
            'time'      : 'datetime',
            'duration'  : 'datetime',
            'notes'     : 'text',
          }
          self.squid.data['services'] = "workout";
          self.squid.data['time'] = "now";
          self.maxvallen = 20;
          self.reconstruct();


class ClientEditWindow(squint.EditWindow):


      def text_client(self):
          number = self.data[self.cursor.ypos]["phone"];
          if not number: return;
          msg = cmdwin.read();
          if self.comms.driver == None:
             self.comms.voice_login();
          self.comms.voice_text(number, msg);
          self.data[self.cursor.ypos]['contact'] = toolbelt.converters.date('now');
          self.squid.update(self.data[self.cursor.ypos]);


      def email_client(self):
          email = self.data[self.cursor.ypos]["email"];
          if not email: return;
          subject = cmdwin.read();
          msg = "Hey dude. " 
          msg = toolbelt.editors.vim(msg);
          self.comms.email(email, subject, msg, None);
          self.data[self.cursor.ypos]['contact'] = toolbelt.converters.date('now');
          self.squid.update(self.data[self.cursor.ypos]);


      def __init__(self, title, keybindings, squid):
          squint.EditWindow.__init__(self, title, keybindings, squid);
          self.keybindings.add('t', self.text_client, None);
          self.keybindings.add('e', self.email_client, None);
          self.comms = butterfly.comms.Comms();



class ScheduleWindow(squint.NewWindow):


      def insert(self):
          self.client_squid.query("select id,email from client where user='%s'" % (self.squid.data['client']));
          self.squid.data['clientid'] = self.client_squid.data[0]['id'];
          del self.squid.data['client'];

          email    = self.client_squid.data[0]['email'];
          service  = self.squid.data['services'];
          time     = self.squid.data['time'];
          duration = self.squid.data['duration'];
          butterfly.scheduler.schedule_client(time,duration,service,email);

          self.squid.insert(self.squid.data);
          notewin.write("Scheduled!");


      def reconstruct(self):
          squint.NewWindow.reconstruct(self);
          self.keys = ["client", "services", "time", "duration", "notes"];
          self.squid.fields = {
            'client'    : 'varchar(256)',
            'services'  : 'varchar(256)',
            'time'      : 'datetime',
            'duration'  : 'datetime',
            'notes'     : 'text',
          }


      def __init__(self, title, keybindings, client_squid, session_squid):
          squint.NewWindow.__init__(self, title, keybindings, session_squid);
          self.client_squid = client_squid;


x = squint.MainMenu([
      squint.SubMenu("new", None, [
          squint.NewWindow("client", None, client_squid),
          ScheduleWindow("session", None, client_squid, schedule_squid),
          squint.NewWindow("exercise", None, exercise_squid),
          WorkoutWindow("workout", None, session_squid, client_squid, exset_squid),
        ]),
      squint.SubMenu("edit", None, [
          ClientEditWindow("client", None, client_squid),
          squint.EditWindow("session", None, session_squid),
          squint.EditWindow("exercise", None, exercise_squid),
      ]),
      squint.SubMenu("view", None, [
          squint.ViewWindow("client", None, client_squid),
          squint.ViewWindow("session", None, session_squid),
          squint.ViewWindow("exercise", None, exercise_squid)
      ])
    ])

x.draw();


#x = squint.MainMenu([
#      squint.SubMenu("client", None, [
#          squint.NewWindow("new", None, client_squid),
#          #squint.NewWindow("import", None, client_squid),
#          ClientEditWindow("edit", None, client_squid),
#          squint.ViewWindow("view", None, client_squid),
#        ]),
#      squint.SubMenu("session", None, [
#          ScheduleWindow("schedule", None, client_squid, schedule_squid),
#          WorkoutWindow("workout", None, session_squid, client_squid, exset_squid),
#          squint.EditWindow("edit", None, session_squid),
#          squint.ViewWindow("view", None, session_squid),
#      ]),
#      squint.SubMenu("exercise", None, [
#          squint.NewWindow("new", None, exercise_squid),
#          squint.EditWindow("edit", None, exercise_squid),
#          squint.ViewWindow("view", None, exercise_squid)
#      ])
#    ])
